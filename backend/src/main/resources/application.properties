# ===============================================
# SLOT MACHINE BACKEND CONFIGURATION
# ===============================================
# Diese Datei konfiguriert die gesamte Spring Boot Anwendung
# Spring Boot lädt diese Properties automatisch beim Start

# ===== APPLICATION SETTINGS =====
spring.application.name=backend

# ===== MYSQL DATABASE CONNECTION =====
# Datenbankverbindung zur lokalen MySQL-Instanz
spring.datasource.url=jdbc:mysql://localhost:3306/slotmachine
spring.datasource.username=root
spring.datasource.password=Test.123

# MySQL JDBC Driver (explizit angegeben für Klarheit)
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# ===== JPA/HIBERNATE CONFIGURATION =====
# Hibernate DDL-Auto: Tabellen automatisch erstellen/updaten
# - create: Tabellen bei jedem Start neu erstellen (Daten verloren!)
# - update: Tabellen updaten, Daten bleiben erhalten (DEVELOPMENT)
# - validate: Nur prüfen ob Schema stimmt (PRODUCTION)
# - none: Nichts automatisch machen
spring.jpa.hibernate.ddl-auto=update

# SQL-Queries in Console anzeigen (hilfreich für Debugging)
spring.jpa.show-sql=true

# MySQL Dialect für optimierte SQL-Generierung
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# ===== SERVER CONFIGURATION =====
# HTTP Port für das Backend (Standard: 8080)
server.port=8080

# ===============================================
# KONFIGURATION ERKLÄRUNG FÜR DOZENTEN
# ===============================================

# 1. DATASOURCE CONFIGURATION:
#    Spring Boot verbindet sich automatisch zur Datenbank
#    Connection Pool wird automatisch konfiguriert
#    Transaktionen werden automatisch verwaltet

# 2. HIBERNATE DDL-AUTO OPTIONEN:
#    - create: DROP + CREATE (Daten weg!)
#    - create-drop: CREATE + DROP am Ende (Testing)
#    - update: Nur Änderungen (Safe für Development)
#    - validate: Nur validieren (Production)
#    - none: Manual Schema Management

# 3. PRODUCTION CONSIDERATIONS:
#    - DDL-Auto auf 'validate' oder 'none' setzen
#    - show-sql auf false (Performance)
#    - Connection Pool konfigurieren
#    - SSL für Datenbankverbindung
#    - Secrets nicht in Properties (Environment Variables)

# 4. ALTERNATIVE KONFIGURATION:
#    - application.yml (YAML-Format)
#    - Environment-spezifische Configs (application-dev.properties)
#    - @ConfigurationProperties Klassen
#    - Spring Cloud Config Server

# 5. DEBUGGING TIPPS:
#    - show-sql=true zeigt alle SQL Queries
#    - logging.level.org.hibernate=DEBUG für mehr Details
#    - spring.jpa.properties.hibernate.format_sql=true für Pretty-Print
